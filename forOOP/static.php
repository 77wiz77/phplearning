<?php //Статические методы и свойства. Константы
  /*Кроме обычных методов с разными модификаторами доступа класс может содержать статические методы. 
  Такие методы помечаются ключевым словом static:*/
  // class User
  // {
  //   static function getClassInfo()
  //   {
  //       echo "Это класс User, описывающий пользователя <br />";
  //   }
  // }
  // User::getClassInfo();

  /*
  При вызове статического метода используется имя класса и оператор ::, вместо операции доступа ->, 
  так как статический метод относится ко всему классу, а не к конкретному объекту этого класса.

  Наряду со статическими методами класс может также иметь статические свойства. 
  Опять же статические свойства относятся ко всему классу, а не к отдельному объекту класса. 
  Например, используем статическое свойство для создания счетчика объектов:
  */
?>

<?php
  class User
  {
      private $id;
      private static $counter=0;
      
      function __construct()
      {
          self::$counter++;
          $this->id=self::$counter;
      }
      
      static function getCounter()
      {
          return self::$counter;
      }
      function getId()
      {
          return $this->id;
      }
  }
  
  $user1 = new User;
  echo "Id первого пользователя: " . $user1->getId() . "<br />";
  $user2 = new User;
  echo "Id второго пользователя: " . $user2->getId() . "<br />";
  echo "Всего пользователей: " .  User::getCounter();

  /*
  Для обращения к статическим свойствам изнутри класса используется ключевое слово self и операция ::, например, self::$counter++.
  В конструкторе мы увеличиваем статическую переменную, а затем устанавливаем ее значение для свойства $id.
  Кроме обычных свойств класс может иметь константы. Константы представляют поля, значения которых нельзя изменить. 
  Для определения констант используется инструкция const:
  */
?>

<?php
  class User2
  {
      const EMPLOYEE = 1;
      const MANAGER = 2;
      const ADMIN = 3;
  }
  
  echo User2::MANAGER; //2
  //Обращение к константам идет также, как и статическим свойствам: User2::MANAGER.
?>