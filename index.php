<!DOCTYPE html>
<html>
<head>
<title>Первый сайт на PHP</title>
<meta charset="utf-8">
</head>
<body>

<!--Пример работы формы через файл display.php -->
  <!-- <h2>ПРИВЕТ:</h2> 
    <form action="display.php" method="POST">
      <p>Введите имя: <input type="text" name="firstname" /></p> 
      <p>Введите фамилию: <input type="text" name="lastname" /></p>
      <input type="submit" value="Отправить">
    </form> -->
  
<!--Переменные-->
<?php // вывод переменной
  // $a = 10;
  // echo "a = " . $a . "<br>";
  // $b=$a;
  // echo "b = " . $b . "<br>";
?>

<?php //проверка на существование
  // $a;
  // if(isset($a)) //проверка на существование
  //     echo "a = " . $a;
  // else
  //     echo "переменная a не определена";
?>
 
<?php //удаление значения переменной
  // $a=20;
  // echo $a . "<br>"; // 20
  // unset($a); //удаление значения переменной a
  // echo $a; // ошибка, переменная не определена (ничего не выведется)
  // if(isset($a)) //проверка на существование
  //     echo "a = " . $a;
  // else
  //     echo "переменная a не определена";
?>

<!--Тип-->

<?php //В php тип данных указывать не нужно, так как в php динамическая типизация
  // $int = -100; //тут int чисто имя переменной
  // echo $int;
?>

<?php //Кроме десятичных целых чисел PHP обладает возможностью использовать также двоичные, восьмеричные и шестнадцатеричные числа.
  // Все числа в десятичной системе имеют значение 28
  // $int_10 = 28; // десятичное число
  // $int_2 = 0b11100; // двоичное число
  // $int_8 = 034; // восьмеричное число
  // $int_16 = 0x1C; // шестнадцатеричное число

  // //выведется везде число 28, php сам преобразовывает другие системы исчисления в десятичные
  // echo "int_10 = $int_10 <br>"; 
  // echo "int_2 = $int_2 <br>"; 
  // echo "int_8 = $int_8 <br>";  
  // echo "int_16 = $int_16";
?>

<?php //тип double
  // $a1 = 1.5; 
  // $a2 = 1.3e4; // 1.3 * 10^4 или 13000
  // $a3 = 6E-8; // 0.00000006
  // echo $a1 . " | " . $a2 . " | " . $a3;
?>

<?php //тип boolean
  // $foo = true;
  // $a=10;
  // $b=5;
  // echo "foo = true <br>";
  // if($foo) //если $foo равно true
  //   echo $a+$b;
  // else
  //   echo $a-$b;
  // $foo = false;
  // echo "<br> foo = false <br>";
  // if($foo)
  //   echo $a+$b;
  // else
  //   echo $a-$b;
?>

<?php //Специальное значение NULL
  // $a;
  // echo $a; //ничего не выведется
?>

<?php //Значение NULL указывает, что значение переменной не определено
  // $a=NULL;

  // if($a)
  //     echo "Переменная a определена";
  // else
  //     echo "Переменная a не определена";

  // $a=null; //Константа NULL не чувствительна к регистру, поэтому мы можем написать и так
?>

<?php //тип строки string
//От типа кавычек зависит обработка строк интерпретатором. 
//Так, переменные в двойных кавычках заменяются значениями, а переменные в одинарных кавычках остаются неизменными.
  // $a=10;
  // $b=5;
  // $result = "$a+$b <br>";
  // echo $result;
  // $result = '$a+$b';
  // echo $result;
  // //$text = "Модель "Apple II""; так неправильно, чтобы вывести ковычки можно воспользоваться знаком слэш перед каждой из них
  // $text = "Модель \"Apple II\"";
  // echo $text;
?>

<?php //тип array (ассоциативные массивы)
  // $phones = array('iPhone', 'Samsung Galaxy S III', 'Nokia N9', 'Samsung ACE II');
  // echo $phones[1];
?>

<!--Константы-->
<?php
// define("NUMBER", 22); // define - оператор для определения константы, позже значение этой переменной изменить нельзя
// echo NUMBER;
// $num = NUMBER;
// echo $num;
?>

<!--Предопределенные константы-->
<!-- 
__FILE__: хранит полный путь и имя текущего файла
__LINE__: хранит текущий номер строки, которую обрабатывает интерпретатор
__DIR__: хранит каталог текущего файла
__FUNCTION__: название обрабатываемой функции
__CLASS__: название текущего класса
__METHOD__: название обрабатываемого метода
__NAMESPACE__: название текущего пространства имен -->

<?php
// echo "Cтрока " . __LINE__ . " в файле " . __FILE__; 
// Чтобы проверить, определены ли константы, мы можем использовать функцию bool defined(string $name). 
// Если константа $name определена, то функция будет возвращать значение true
?>

<!--Получение и установка типа переменной -->
<?php
  $a = 10;
  $b = "10";
  echo is_numeric($a);
  echo "<br>";
  echo is_numeric($b);
  /*is_integer($a): возвращает значение TRUE, если переменная $a хранит целое число
  is_string($a): возвращает значение TRUE, если переменная $a хранит строку
  is_double($a): возвращает значение TRUE, если переменная $a хранит действительное число
  is_numeric($a): возвращает значение TRUE, если переменная $a представляет целое или действительное число 
  или является строковым представлением числа. 
  Оба выражения is_numeric() возвратят TRUE, так как переменная $a представляет число, 
  а переменная $b является строковым представлением числа
  is_bool($a): возвращает значение TRUE, если переменная $a хранит значение TRUE или FALSE
  is_scalar($a): возвращает значение TRUE, если переменная $a представляет один из простых типов: 
  строку, целое число, действительное число, логическое значение.
  is_null($a): возвращает значение TRUE, если переменная $a хранит значение NULL
  is_array($a): возвращает значение TRUE, если переменная $a является массивом
  is_object($a): возвращает значение TRUE, если переменная $a содержит ссылку на объект
  gettype($a): возвращает тип переменной $a, например, 
  integer (целое число), double (действительное число), string (строка), boolean (логическое значение), 
  NULL, array (массив), object (объект) или unknown type. Например:*/
?>


</body>
</html>